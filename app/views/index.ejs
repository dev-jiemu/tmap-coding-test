<!doctype html>
<html lang="ko" class="overflow-hidden">
<head>
    <meta charset="UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <title>TmapCodingTest</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css"/>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

    <script src="/getScript"></script>
</head>

<body class="overflow-hidden">

<!-- map, list , root -->
<section class="relative h-dvh w-dvh bg-black/20">
    <div class="size-full object-cover" id="map_div"></div>
</section>

<script>
    function initTmap() {
        console.log('initializing TMAP...');

        try {
            let map = new Tmapv2.Map("map_div", {
                center: new Tmapv2.LatLng(37.529521713, 126.964540921),
                width: "100%",
                height: "100%",
                zoom: 15
            });

            window.tmapInstance = map;
            window.tmapInitialized = true;
            window.tmapMarkers = [];

            console.log('TMAP initialized successfully!');

        } catch (error) {
            console.error('TMAP initialization failed:', error);
        }
    }

    function addTmapMarker(poi) {
        if (!window.tmapInitialized || !window.tmapInstance) {
            console.log('TMAP not ready, skipping marker:', poi.title);
            return;
        }

        try {
            let marker = new Tmapv2.Marker({
                position: new Tmapv2.LatLng(poi.latitude, poi.longitude),
                icon: "/images/pin-location.svg",
                iconSize: new Tmapv2.Size(24, 38),
                title: poi.title,
                map: window.tmapInstance
            });

            marker.addListener("click", function () {
                alert("POI: " + poi.title);
            });

            // title search
            marker.poiTitle = poi.title;

            if (!window.tmapMarkers) window.tmapMarkers = [];
            window.tmapMarkers.push(marker);

            console.log('Marker added:', poi.title);

        } catch (error) {
            console.error('Failed to add marker:', poi.title, error);
        }
    }

    let currentLocationMarker = null;
    let locationWatchId = null;

    // current location with watch
    function getCurrentLocation(latitude, longitude) {
        if (!window.tmapInitialized || !window.tmapInstance) {
            console.error('TMAP not ready')
            return;
        }

        if (currentLocationMarker) {
            currentLocationMarker.setMap(null);
        }

        try {
            currentLocationMarker = new Tmapv2.Marker({
                position: new Tmapv2.LatLng(latitude, longitude),
                icon: "/images/pin-red.svg",
                iconSize: new Tmapv2.Size(30, 30),
                title: "현재 위치",
                map: window.tmapInstance
            });

            console.log('current location marker updated:', latitude, longitude);

        } catch (error) {
            console.error('failed to add current location marker:', error);
        }
    }

    function startLocationTracking() {
        if (!navigator.geolocation) {
            console.log('geolocation is not supported by this browser.');
            return;
        }

        locationWatchId = navigator.geolocation.watchPosition(
                function (position) {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;

                    console.log('position updated:', latitude, longitude);
                    getCurrentLocation(latitude, longitude);
                },
                function (error) {
                    console.error('unable to retrieve location information:', error);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 30000 // 30s
                }
        );
    }

    function searchMarker(searchText) {
        if (!searchText || !searchText.trim()) {
            console.log('search text is empty')
            return;
        }

        const filteredMarkers = window.tmapMarkers.filter(marker =>
                marker.poiTitle &&
                marker.poiTitle.toLowerCase().includes(searchText)
        );

        if (filteredMarkers.length > 0) {
            const targetMarker = filteredMarkers[0];
            const position = targetMarker.getPosition();

            // 지도 이동 처리
            window.tmapInstance.setCenter(position);
            window.tmapInstance.setZoom(15);

            console.log(`moved to ${targetMarker.poiTitle}`);

            return filteredMarkers;
        } else {
            console.log('search is not found');
            return [];
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
            initTmap();

            setTimeout(function () {
                if (typeof loadPOIMarkers === 'function') {
                    console.log('loading POI markers after TMAP initialization...');
                    loadPOIMarkers();
                }

                console.log('getting current location...');
                startLocationTracking(); // 현재 위치 추적
            }, 500);

        }, 1000);
    });
</script>
<div class="fixed top-0">
    <div class="p-1 bg-white flex items-center gap-2">
        <label class="input w-full">
            <input type="search" id="searchInput" required placeholder="Search" 
                   onkeypress="if(event.key==='Enter') searchMarker(this.value.toLowerCase().trim())"/>
        </label>

        <button type="button" class="flex-none size-10 cursor-pointer" 
                onclick="searchMarker(document.getElementById('searchInput').value.toLowerCase().trim())">
            <svg class="w-full h-[2rem] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <g
                        stroke-linejoin="round"
                        stroke-linecap="round"
                        stroke-width="2.5"
                        fill="none"
                        stroke="currentColor"
                >
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="m21 21-4.3-4.3"></path>
                </g>
            </svg>
        </button>
    </div>
</div>
<div
        class="fixed bottom-10 left-10 z-[5] grid grid-rows-2 gap-10 peer-aria-[hidden=false]:bottom-[58dvh]"
        data-location="box"
        id="btnBox"
>
    <button
            type="button"
            class="grid size-15 place-content-center rounded-full border border-[#ccc] bg-[#fff] shadow-md"
            aria-label="refresh"
            title="refresh"
            onclick="refresh()"
    >
        <span>refresh</span>
    </button>
    <input type="file" id="excelFileInput" accept=".xlsx,.xls" style="display: none;">
    <button
            type="button"
            class="grid size-15 place-content-center rounded-full border border-[#ccc] bg-[#fff] shadow-md"
            aria-label="import"
            title="import"
            onclick="document.getElementById('excelFileInput').click()"
    >
        <span>import</span>
    </button>
</div>

<script>
    function refresh() {
        console.log('Refresh button clicked');
        loadPOIMarkers();
    }

    // 기존 마커 있으면 지움
    function clearTmapMarkers() {
        if (window.tmapMarkers && window.tmapMarkers.length > 0) {
            console.log('clearing existing markers:', window.tmapMarkers.length);
            window.tmapMarkers.forEach(marker => {
                marker.setMap(null);
            });
            window.tmapMarkers = [];
        }
    }

    function loadPOIMarkers() {
        console.log('loading POI markers...');

        clearTmapMarkers()

        fetch('/api/poi-list')
                .then(response => response.json())
                .then(data => {
                    console.log('poi list retrieved:', data);

                    if (data.resultData && data.resultData.length > 0) {
                        console.log('Found', data.resultData.length, 'POI items');
                        data.resultData.forEach(poi => {
                            console.log('POI:', poi.title, poi.latitude, poi.longitude);
                            addTmapMarker(poi);
                        });
                    } else {
                        console.log('poi data empty');
                    }
                })
                .catch(error => {
                    console.error('failed to load poi list:', error);
                });
    }

    document.getElementById('excelFileInput').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (!file) return;

        console.log('file selected:', file.name);

        const formData = new FormData();
        formData.append('poiFile', file);

        fetch('/api/upload-poi', {
            method: 'POST',
            body: formData
        })
                .then(response => response.json())
                .then(data => {
                    console.log('upload success:', data);
                    alert('upload completed! ' + data.statusMessage);
                    loadPOIMarkers();
                })
                .catch(error => {
                    console.error('upload failed:', error);
                    alert('upload failed: ' + error.message);
                });

        e.target.value = ''; // 초기화
    });
</script>
</body>
</html>